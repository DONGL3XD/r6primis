{"ast":null,"code":"/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2'),\n  parse5 = require('parse5');\n\n/*\n  Parser\n*/\nexports = module.exports = function (content, options, isDocument) {\n  var dom = exports.evaluate(content, options, isDocument),\n    // Generic root element\n    root = exports.evaluate('<root></root>', options, false)[0];\n  root.type = 'root';\n  root.parent = null;\n\n  // Update the dom using the root\n  exports.update(dom, root);\n  return root;\n};\nfunction parseWithParse5(content, isDocument) {\n  var parse = isDocument ? parse5.parse : parse5.parseFragment,\n    root = parse(content, {\n      treeAdapter: parse5.treeAdapters.htmlparser2\n    });\n  return root.children;\n}\nexports.evaluate = function (content, options, isDocument) {\n  // options = options || $.fn.options;\n\n  var dom;\n  if (Buffer.isBuffer(content)) content = content.toString();\n  if (typeof content === 'string') {\n    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;\n    dom = useHtmlParser2 ? htmlparser.parseDOM(content, options) : parseWithParse5(content, isDocument);\n  } else {\n    dom = content;\n  }\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n      oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n  return parent;\n};\n\n// module.exports = $.extend(exports);","map":{"version":3,"names":["htmlparser","require","parse5","exports","module","content","options","isDocument","dom","evaluate","root","type","parent","update","parseWithParse5","parse","parseFragment","treeAdapter","treeAdapters","htmlparser2","children","Buffer","isBuffer","toString","useHtmlParser2","xmlMode","_useHtmlParser2","parseDOM","arr","Array","isArray","i","length","node","oldParent","oldSiblings","splice","indexOf","prev","next"],"sources":["C:/Users/osung0054/node_modules/cheerio/lib/parse.js"],"sourcesContent":["/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2'),\n    parse5 = require('parse5');\n\n/*\n  Parser\n*/\nexports = module.exports = function(content, options, isDocument) {\n  var dom = exports.evaluate(content, options, isDocument),\n      // Generic root element\n      root = exports.evaluate('<root></root>', options, false)[0];\n\n  root.type = 'root';\n  root.parent = null;\n\n  // Update the dom using the root\n  exports.update(dom, root);\n\n  return root;\n};\n\nfunction parseWithParse5 (content, isDocument) {\n  var parse = isDocument ? parse5.parse : parse5.parseFragment,\n      root = parse(content, { treeAdapter: parse5.treeAdapters.htmlparser2 });\n\n  return root.children;\n}\n\nexports.evaluate = function(content, options, isDocument) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (Buffer.isBuffer(content))\n    content = content.toString();\n\n  if (typeof content === 'string') {\n    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;\n\n    dom = useHtmlParser2 ? htmlparser.parseDOM(content, options) : parseWithParse5(content, isDocument);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function(arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n};\n\n// module.exports = $.extend(exports);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}